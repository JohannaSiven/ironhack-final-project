#!/usr/bin/env node

const http = require("http");

let app = require("../app");

// catch 404 and render a not-found.hbs template
app.use((req, res, next) => {
  res.status(404);
  res.render("not-found");
});

app.use((err, req, res, next) => {
  // always log the error
  console.error("ERROR", req.method, req.path, err);

  // only render if the error ocurred before sending the response
  if (!res.headersSent) {
    res.status(500);
    res.render("error");
  }
});

let server = http.createServer(app);

server.on("error", error => {
  if (error.syscall !== "listen") {
    throw error;
  }

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(`Port ${process.env.PORT} requires elevated privileges`);
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(`Port ${process.env.PORT} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
});

// socket io

const io = require("socket.io").listen(server);

server.listen(process.env.PORT, () => {
  console.log(`Listening on http://localhost:${process.env.PORT}`);
});

io.on("connection", socket => {
  console.log("### client connected");
  socket.on("disconnect", () => {
    console.log("### client disconnected");
  });

  //emit new message in chat
  socket.on("message", msg => {
    console.log("### SOCKET message received: ", msg);
    io.emit("message", msg);
  });

  //emit notification about new applicant
  socket.on("application", application => {
    console.log("### SOCKET new application: ", application);
    console.log(socket.id);

    io.emit("application", application);
  });

  //emit notification about accepted application
  socket.on("accepted", accepted => {
    console.log("### SOCKET application accepted: ", accepted);
    // send to specific socket id?
    io.emit("accepted", accepted);
  });
  //emit notification about rejected application
  socket.on("rejected", rejected => {
    console.log("### SOCKET application rejected: ", rejected);
    // send to specific socket id?
    io.emit("rejected", rejected);
  });
});
